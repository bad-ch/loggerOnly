{"version":3,"file":"loggerOnly.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;ACVgC;AACzB;AACP;AACA,wBAAwB,yCAAK;AAC7B;AACA;AACA;AACA,aAAa,yCAAK,yBAAyB;AAC3C,aAAa,yCAAK,uBAAuB;AACzC,aAAa,yCAAK,wBAAwB;AAC1C,aAAa,yCAAK,wBAAwB;AAC1C,aAAa,yCAAK,0BAA0B,kBAAkB;AAC9D,aAAa,yCAAK,0BAA0B,kBAAkB;AAC9D;AACA;AACA,cAAc,2CAA2C,cAAc,kBAAkB,GAAG;AAC5F,cAAc,2CAA2C,cAAc,kBAAkB;AACzF;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtBgC;AACzB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA,oBAAoB,2CAA2C;AAC/D;AACA,oBAAoB,GAAG,KAAK,YAAY,KAAK,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5EU;;;;;;;;;;;;;;;ACAV;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB;;;;;;;;;;;;;;;;;;ACXS;AACI;AACF;AAC3B;AACP;AACA;AACA,aAAa,yCAAK;AAClB,aAAa,yCAAK;AAClB,aAAa,yCAAK;AAClB,aAAa,yCAAK;AAClB,aAAa,yCAAK;AAClB,aAAa,yCAAK;AAClB;AACA;AACA;AACA,+BAA+B,2CAAM;AACrC;AACA;AACA,+BAA+B,2CAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yCAAK;AAC9C;AACA;AACA,yCAAyC,yCAAK;AAC9C;AACA;AACA,yCAAyC,yCAAK;AAC9C;AACA;AACA,yCAAyC,yCAAK;AAC9C;AACA;AACA,yCAAyC,yCAAK;AAC9C;AACA;AACA,yCAAyC,yCAAK;AAC9C;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAO;AACf;AACA;AACA;;;;;;;UCnEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAC0B;AACF;AACC;AACA;AACH","sources":["webpack://loggerOnly/webpack/universalModuleDefinition","webpack://loggerOnly/./build/config.js","webpack://loggerOnly/./build/display.js","webpack://loggerOnly/./build/dto.js","webpack://loggerOnly/./build/level.js","webpack://loggerOnly/./build/logger.js","webpack://loggerOnly/webpack/bootstrap","webpack://loggerOnly/webpack/runtime/define property getters","webpack://loggerOnly/webpack/runtime/hasOwnProperty shorthand","webpack://loggerOnly/webpack/runtime/make namespace object","webpack://loggerOnly/./build/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"loggerOnly\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"loggerOnly\"] = factory();\n\telse\n\t\troot[\"loggerOnly\"] = factory();\n})(self, () => {\nreturn ","import { Level } from \"./level\";\r\nexport class Config {\r\n    constructor() {\r\n        this.logLevel = Level.DEBUG;\r\n        this.timeStamp = true;\r\n        this.timeStampFormat = 'dd.MM.yyyy hh:mm:ss ms';\r\n        this.levelStyle = {\r\n            [Level.DEBUG]: \"color: #9C27B0;\",\r\n            [Level.LOG]: \"color: #616161;\",\r\n            [Level.INFO]: \"color: #1976D2;\",\r\n            [Level.WARN]: \"color: #FF5722;\",\r\n            [Level.ERROR]: \"color: #EF5350; font-weight: bold;\",\r\n            [Level.FATAL]: \"color: #C62828; font-weight: bold;\"\r\n        };\r\n        this.modules = [\r\n            { name: 'Global', css: 'background: #7CB342; color: white; font-weight: bold;' },\r\n            { name: 'Modul1', css: 'background: #43A047; color: white; font-weight: bold;' }\r\n        ];\r\n    }\r\n    GetMaxLength() {\r\n        return Math.max(...this.modules.map(x => x.name.length));\r\n    }\r\n}\r\n","import { Level } from \"./level\";\r\nexport class Display {\r\n    static msg(originalReference, message, level, moduleName, config) {\r\n        if (level > config.logLevel) {\r\n            // suppress level\r\n            return;\r\n        }\r\n        if (!moduleName) {\r\n            moduleName = config.modules[0].name;\r\n        }\r\n        const diff = config.GetMaxLength() - moduleName.length;\r\n        if (diff > 0) {\r\n            for (let i = 0; i < diff; i++) {\r\n                moduleName += ' ';\r\n            }\r\n        }\r\n        let ts = '';\r\n        if (config.timeStamp) {\r\n            ts = `${this.getTimeStamp(config.timeStampFormat)} `;\r\n        }\r\n        let a1 = `${ts}%c ${moduleName} %c ${message}`;\r\n        let a2 = config.modules.find(x => x.name === moduleName).css;\r\n        let a3 = config.levelStyle[level];\r\n        const params = [];\r\n        params.unshift(a3);\r\n        params.unshift(a2);\r\n        params.unshift(a1);\r\n        switch (level) {\r\n            case Level.INFO:\r\n                originalReference.info.apply(console, params);\r\n                break;\r\n            case Level.DEBUG:\r\n                originalReference.info.apply(console, params);\r\n                break;\r\n            case Level.LOG:\r\n                originalReference.log.apply(console, params);\r\n                break;\r\n            case Level.WARN:\r\n                originalReference.warn.apply(console, params);\r\n                break;\r\n            case Level.ERROR:\r\n                originalReference.error.apply(console, params);\r\n                break;\r\n            case Level.FATAL:\r\n                originalReference.error.apply(console, params);\r\n                break;\r\n        }\r\n    }\r\n    static getTimeStamp(format) {\r\n        const date = new Date();\r\n        const [month, day, year] = [\r\n            date.getMonth() + 1,\r\n            date.getDate(),\r\n            date.getFullYear(),\r\n        ];\r\n        const [hour, minutes, seconds, ms] = [\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds(),\r\n        ];\r\n        return format\r\n            .replaceAll('dd', String(this.pad(day, 2)))\r\n            .replaceAll('MM', String(this.pad(month, 2)))\r\n            .replaceAll('yyyy', String(this.pad(year, 4)))\r\n            .replaceAll('hh', String(this.pad(hour, 2)))\r\n            .replaceAll('mm', String(this.pad(minutes, 2)))\r\n            .replaceAll('ss', String(this.pad(seconds, 2)))\r\n            .replaceAll('ms', String(this.pad(ms, 4)));\r\n    }\r\n    static pad(num, size) {\r\n        let numStr = num.toString();\r\n        while (numStr.length < size)\r\n            numStr = \"0\" + numStr;\r\n        return numStr;\r\n    }\r\n}\r\n","export {};\r\n","/**\r\n * Supported levels of logging\r\n */\r\nexport var Level;\r\n(function (Level) {\r\n    Level[Level[\"DEBUG\"] = 5] = \"DEBUG\";\r\n    Level[Level[\"LOG\"] = 4] = \"LOG\";\r\n    Level[Level[\"INFO\"] = 3] = \"INFO\";\r\n    Level[Level[\"WARN\"] = 2] = \"WARN\";\r\n    Level[Level[\"ERROR\"] = 1] = \"ERROR\";\r\n    Level[Level[\"FATAL\"] = 0] = \"FATAL\";\r\n})(Level || (Level = {}));\r\n","import { Level } from \"./level\";\r\nimport { Display } from \"./display\";\r\nimport { Config } from \"./config\";\r\nexport class Logger {\r\n    constructor(config) {\r\n        this._logLevelAsString = {\r\n            [Level.DEBUG]: 'Debug',\r\n            [Level.LOG]: 'Log',\r\n            [Level.INFO]: 'Info',\r\n            [Level.WARN]: 'Warning',\r\n            [Level.ERROR]: 'Error',\r\n            [Level.FATAL]: 'Fatal'\r\n        };\r\n        this._consoleOriginal = window.console;\r\n        if (!config) {\r\n            this._config = new Config();\r\n        }\r\n        else {\r\n            this._config = new Config();\r\n            if (config.logLevel) {\r\n                this._config.logLevel = config.logLevel;\r\n            }\r\n            if (config.levelStyle) {\r\n                this._config.levelStyle = config.levelStyle;\r\n            }\r\n            if (config.modules) {\r\n                this._config.modules = config.modules;\r\n            }\r\n            if (config.timeStamp) {\r\n                this._config.timeStamp = config.timeStamp;\r\n            }\r\n            if (config.timeStampFormat) {\r\n                this._config.timeStampFormat = config.timeStampFormat;\r\n            }\r\n        }\r\n    }\r\n    config() {\r\n        return this._config;\r\n    }\r\n    originalInstance() {\r\n        return this._consoleOriginal;\r\n    }\r\n    debug(message, moduleName) {\r\n        return this._logMessage(message, Level.DEBUG, moduleName);\r\n    }\r\n    log(message, moduleName) {\r\n        return this._logMessage(message, Level.LOG, moduleName);\r\n    }\r\n    error(message, moduleName) {\r\n        return this._logMessage(message, Level.ERROR, moduleName);\r\n    }\r\n    info(message, moduleName) {\r\n        return this._logMessage(message, Level.INFO, moduleName);\r\n    }\r\n    warn(message, moduleName) {\r\n        return this._logMessage(message, Level.WARN, moduleName);\r\n    }\r\n    fatal(message, moduleName) {\r\n        return this._logMessage(message, Level.FATAL, moduleName);\r\n    }\r\n    logLevel() {\r\n        return this._logLevelAsString[this._config.logLevel];\r\n    }\r\n    _logMessage(message, level, moduleName) {\r\n        Display.msg(this._consoleOriginal, message, level, moduleName, this._config);\r\n        return this;\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * @file Automatically generated by barrelsby.\r\n */\r\nexport * from \"./display\";\r\nexport * from \"./level\";\r\nexport * from \"./logger\";\r\nexport * from \"./config\";\r\nexport * from \"./dto\";\r\n"],"names":[],"sourceRoot":""}